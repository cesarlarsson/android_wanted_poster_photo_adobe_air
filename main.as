package  {		import flash.display.MovieClip;	import flash.media.CameraRoll;	import flash.events.Event;	import flash.events.ErrorEvent;	import flash.display.BitmapData;	import flash.display.SimpleButton;	import flash.events.MouseEvent;	import flash.events.KeyboardEvent;	import flash.ui.Keyboard;	import flash.desktop.NativeApplication;	import flash.utils.getTimer;	import flash.events.ActivityEvent;	import flash.media.Video;	import flash.media.Camera;	import flash.events.TouchEvent;	import fl.motion.MotionEvent;	import flash.events.TimerEvent;	import flash.utils.Timer;	import flash.events.NativeDragEvent;	import flash.desktop.NativeDragManager;		public class main extends MovieClip {		var cameraRoll:CameraRoll;		var bmp:BitmapData;		var video	: Video;				var webcam	: Camera;			var VIDEO_WIDTH 			: Number =289;				//Set 100 to 1000 to set width of screen		var VIDEO_HEIGHT 			: Number = 289;				//Set 100 to 1000 to set height of screen		var WEB_CAMERA_WIDTH 		: Number = VIDEO_WIDTH/2;	//Smaller than video runs faster		var WEB_CAMERA_HEIGHT 		: Number = VIDEO_HEIGHT/2;	//Smaller than video runs faster		var VIDEO_FRAME_RATE 		: Number = 30;				//Set 5 to 30.  Higher values = smoother video		var DETECTION_THRESHOLD		: uint 	 = 80;				//Set 50 to 100. Set to detect marker more accurately.		var DETECTION_CONFIDENCE	: Number = 0.5;				//Set 0.1 to 1. Set to detect marker more accurately.		var MODEL_SCALE 			: Number = 0.0175;			//Set 0.01 to 5. Set higher to enlarge model		var  temporizador:Timer;		var camaraactual:String="0";		var firsttime:Boolean=false;		public function main() {			// constructor code			this.btnCapture.addEventListener(MouseEvent.CLICK,saveToCameraRoll); 			stage.addEventListener(KeyboardEvent.KEY_DOWN, onKey);			btnrotar.addEventListener(MouseEvent.CLICK,rotarcamara); 			bg.txtnombre.addEventListener(MouseEvent.CLICK,quitartexto); 			//Si tiene varias camara activar boton de cambio			if(Camera.names.length>1){				camaraactual="1";				prepareWebCam(camaraactual);				btnchange.addEventListener(MouseEvent.CLICK,cambiarcamara);			}else{				removeChild(btnchange);				prepareWebCam(camaraactual);			}				}		private function quitartexto(eve:MouseEvent):void{			if(bg.txtnombre.text=="Your name"){				bg.txtnombre.text="";			}					}				function cambiarcamara(eve:MouseEvent):void{			if(camaraactual=="1"){				camaraactual="0";				prepareWebCam(camaraactual);			}else{				camaraactual="1";				prepareWebCam(camaraactual);			}		}				function reset(cameraRoll:CameraRoll):void		{			cameraRoll.removeEventListener(Event.COMPLETE, onAddComplete);			cameraRoll.removeEventListener(ErrorEvent.ERROR, onAddError);						bmp.dispose();			bmp = null;			cameraRoll = null;		}		function rotarcamara(eve:MouseEvent){			bg.vdcont.rotation+=90;		}				function prepareWebCam(cam_n:String) : void		{			video = new Video(VIDEO_WIDTH, VIDEO_HEIGHT);			webcam = Camera.getCamera(cam_n);			webcam.setMode(WEB_CAMERA_WIDTH, WEB_CAMERA_HEIGHT, VIDEO_FRAME_RATE);			webcam.addEventListener(ActivityEvent.ACTIVITY, camera_activity);			video.attachCamera(webcam);			video.x=video.x-video.width/2;			video.y=video.y-video.height/2;			bg.vdcont.addChild(video);			if(!firsttime){				firsttime=true;				bg.vdcont.rotation-=90;			}		}			       function camera_activity(evt:ActivityEvent):void {			trace(evt.type.toString()+","+evt.activating.toString());        }		function onAddComplete(e:Event):void		{			var cameraRoll:CameraRoll = e.target as CameraRoll;			reset(cameraRoll);			temporizador=  new Timer(2000, 1)			temporizador.addEventListener(TimerEvent.TIMER_COMPLETE, alTerminar);			txtInfo.text = "Image saved!";			temporizador.start();		}						 		 function alTerminar(evt:TimerEvent){			  // aca tus acciones			  txtInfo.text = "";		 }				function onAddError(e:Event):void		{						var cameraRoll:CameraRoll = e.target as CameraRoll;			reset(cameraRoll);						txtInfo.text = "Failed!";		}		function saveToCameraRoll(e:MouseEvent):void		{						cameraRoll = new CameraRoll();			// pritn a timestamp on screen to distinguish saved images			txtInfo.text = flash.utils.getTimer().toString();			if (CameraRoll.supportsAddBitmapData)			{				bmp = new BitmapData(bg.width, 720);				bmp.draw(bg);								cameraRoll.addEventListener(Event.COMPLETE, onAddComplete);				cameraRoll.addEventListener(ErrorEvent.ERROR, onAddError);				cameraRoll.addBitmapData(bmp);			}			else			{				txtInfo.text = "Feature Not Supported !";			}		}													function onKey(e:KeyboardEvent):void		{			if(e.keyCode == Keyboard.BACK)			{				e.preventDefault();				NativeApplication.nativeApplication.exit();			}		}	}	}